/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.51.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`create_call_feedback_summary`]
#[derive(Clone, Debug)]
pub struct CreateCallFeedbackSummaryParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// Only include feedback given on or after this date. Format is `YYYY-MM-DD` and specified in UTC.
    pub start_date: String,
    /// Only include feedback given on or before this date. Format is `YYYY-MM-DD` and specified in UTC.
    pub end_date: String,
    /// Whether to also include Feedback resources from all subaccounts. `true` includes feedback from all subaccounts and `false`, the default, includes feedback from only the specified account.
    pub include_subaccounts: Option<bool>,
    /// The URL that we will request when the feedback summary is complete.
    pub status_callback: Option<String>,
    /// The HTTP method (`GET` or `POST`) we use to make the request to the `StatusCallback` URL.
    pub status_callback_method: Option<String>,
}

/// struct for passing parameters to the method [`delete_call_feedback_summary`]
#[derive(Clone, Debug)]
pub struct DeleteCallFeedbackSummaryParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// A 34 character string that uniquely identifies this resource.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_call_feedback_summary`]
#[derive(Clone, Debug)]
pub struct FetchCallFeedbackSummaryParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// A 34 character string that uniquely identifies this resource.
    pub sid: String,
}

/// struct for typed errors of method [`create_call_feedback_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCallFeedbackSummaryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_call_feedback_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCallFeedbackSummaryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_call_feedback_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCallFeedbackSummaryError {
    UnknownValue(serde_json::Value),
}

/// Create a FeedbackSummary resource for a call
pub async fn create_call_feedback_summary(
    configuration: &configuration::Configuration,
    params: CreateCallFeedbackSummaryParams,
) -> Result<
    crate::models::ApiPeriodV2010PeriodAccountPeriodCallPeriodCallFeedbackSummary,
    Error<CreateCallFeedbackSummaryError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let account_sid = params.account_sid;
    let start_date = params.start_date;
    let end_date = params.end_date;
    let include_subaccounts = params.include_subaccounts;
    let status_callback = params.status_callback;
    let status_callback_method = params.status_callback_method;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary.json",
        local_var_configuration.base_path,
        AccountSid = crate::apis::urlencode(account_sid)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("StartDate", start_date.to_string());
    local_var_form_params.insert("EndDate", end_date.to_string());
    if let Some(local_var_param_value) = include_subaccounts {
        local_var_form_params.insert("IncludeSubaccounts", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = status_callback {
        local_var_form_params.insert("StatusCallback", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = status_callback_method {
        local_var_form_params.insert("StatusCallbackMethod", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateCallFeedbackSummaryError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a FeedbackSummary resource from a call
pub async fn delete_call_feedback_summary(
    configuration: &configuration::Configuration,
    params: DeleteCallFeedbackSummaryParams,
) -> Result<(), Error<DeleteCallFeedbackSummaryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let account_sid = params.account_sid;
    let sid = params.sid;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json",
        local_var_configuration.base_path,
        AccountSid = crate::apis::urlencode(account_sid),
        Sid = crate::apis::urlencode(sid)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteCallFeedbackSummaryError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch a FeedbackSummary resource from a call
pub async fn fetch_call_feedback_summary(
    configuration: &configuration::Configuration,
    params: FetchCallFeedbackSummaryParams,
) -> Result<
    crate::models::ApiPeriodV2010PeriodAccountPeriodCallPeriodCallFeedbackSummary,
    Error<FetchCallFeedbackSummaryError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let account_sid = params.account_sid;
    let sid = params.sid;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json",
        local_var_configuration.base_path,
        AccountSid = crate::apis::urlencode(account_sid),
        Sid = crate::apis::urlencode(sid)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(
            local_var_auth_conf.0.to_owned(),
            local_var_auth_conf.1.to_owned(),
        );
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FetchCallFeedbackSummaryError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
